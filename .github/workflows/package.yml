# SPDX-FileCopyrightText: 2002 BigBlueButton Inc. and by respective authors
#
# SPDX-License-Identifier: LGPL-3.0-or-later

name: Package build
on:
  push:
    branches: [ "main" ]
    tags: [ "**" ]
    paths-ignore:
      - debian/changelog
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - debian/changelog

jobs:
  ubuntu:
    strategy:
      matrix:
        UBUNTU_VERSION: [ "20.04" ]
        include:
          - UBUNTU_VERSION: "20.04"
            UBUNTU_CODENAME: focal
    runs-on: ubuntu-latest
    container: ubuntu:${{ matrix.UBUNTU_VERSION }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Install debian packaging tools
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends software-properties-common
          add-apt-repository -y ppa:git-core/ppa
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends debhelper devscripts equivs git git-buildpackage pristine-tar

      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          path: source
          fetch-depth: 0

      - name: Set debian package version
        env:
          DEBFULLNAME: GitHub Actions
          DEBEMAIL: hostmaster@blindsidenetworks.com
          UBUNTU_CODENAME: ${{ matrix.UBUNTU_CODENAME }}
          UBUNTU_VERSION: ${{ matrix.UBUNTU_VERSION }}
        run: |
          cd source
          eval "$(./dch_version.sh | tee -a "${GITHUB_ENV}")"
          dch --newversion "${DCH_VERSION}" --force-bad-version --distribution "${UBUNTU_CODENAME}" "Automatic Build"

      - name: Cleanup .github directory
        run: |
          rm -r source/.github

      - name: Install build dependencies
        run: |
          cd source
          DEBIAN_FRONTEND=noninteractive mk-build-deps -i -r -t 'apt-get -y -o Debug::pkgProblemResolver=yes --no-install-recommends'

      - name: Build package
        run: |
          cd source
          gbp buildpackage --git-ignore-new --git-ignore-branch --no-sign
          ls ..

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-${{ matrix.UBUNTU_VERSION }}
          path: "*.deb"
  assets:
    name: "Upload assets to release"
    needs: ubuntu
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' }}
    permissions:
      contents: write
      actions: read

    strategy:
      matrix:
        UBUNTU_VERSION: [ "20.04" ]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: ubuntu-${{ matrix.UBUNTU_VERSION }}
          path: ubuntu-${{ matrix.UBUNTU_VERSION }}

      - name: Create release asset archive
        run: |
          zip -r ubuntu-${{ matrix.UBUNTU_VERSION }}.zip ubuntu-${{ matrix.UBUNTU_VERSION }}

      - name: Upload release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.ref_name }} ubuntu-${{ matrix.UBUNTU_VERSION }}.zip
